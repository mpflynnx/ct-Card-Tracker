#!/usr/bin/env python3
import sys
from pathlib import Path

import click
import yaml
from pathvalidate import sanitize_filename

from ct import __version__

db_dir_name = "card_tracker"
db_filename = ".ct_db.yaml"
db_path = Path.home() / db_dir_name / db_filename


def to_url_style(text):
    """
    Process text string.
    """
    if not text:
        return text

    url_txt = text.strip()

    count = -1
    while count != len(url_txt):
        count = len(url_txt)
        url_txt = url_txt.strip()
        url_txt = url_txt.replace("  ", " ")
        url_txt = url_txt.replace(" ", "")
        url_txt = url_txt.replace("--", "-")
    return url_txt.lower().strip()


def read_db(path):
    """
    Returns dictionary, read from yaml db file found at 'path'.
    """
    with open(path, mode="r") as stream:
        try:
            parsed_db = yaml.safe_load(stream)
        except yaml.YAMLError as exc:
            click.echo(exc)
    return parsed_db


def db_check():
    """
    Validate the db file layout and content. Returns db.
    """

    if not db_path.is_file():  # not exists
        click.echo("\n It looks like this is the first run.")
        click.echo(f"""\n Creating a new db file at "{db_path}".""")
        db = empty_db()
        makedir(db_path.parent)
        dumpdict(db, db_path)
    else:
        db = read_db(db_path)
    return db  # when empty


def dumpdict(dict_name, path):
    """
    dump dict to yaml db file
    """
    with open(path, mode="w", encoding="utf-8") as file:
        # add comment line in file
        file.write("# ct (card tracker) db file, autogenerated, do not edit.")
        file.write("\n")
        yaml.safe_dump(dict_name, file, sort_keys=True, indent=4)


def makedir(dir_path):
    """
    Make new directory only if name doesn't exit as a file or directory.
    """
    if dir_path.is_file():
        sys.exit(
            f"""Fatal error, wanting to create directory "{dir_path}"
            but this exists already as a file.\n
            Please delete file "{dir_path}" first or use a different name.
            """
        )
    click.echo(f"""\n Directory path "{dir_path}" created!\n""")
    Path.mkdir(dir_path, parents=True, exist_ok=True)


def remove_key_from_dict(user_name, key_name):
    """
    Remove key from dictionary.
    """
    parsed_db[user_name].pop(key_name, None)


def create_key_name(prompt, titlecase=False):
    """ """
    while True:
        key_raw = click.prompt(prompt)
        if titlecase:
            key_name = to_url_style(
                sanitize_filename(key_raw, platform="windows")
            ).title()
        else:
            key_name = to_url_style(sanitize_filename(key_raw, platform="windows"))
        if click.confirm(f"\n Confirm: {key_name} ?", default=True):
            return key_name
        continue


def empty_db():
    """
    Create new empty dictionary for db file.
    """
    db = {}
    return db


def display_count(user_name):
    """
    Display total number of entries in user_name nested dict.
    """
    return len(parsed_db[user_name].keys())


def version_msg():
    """
    Return the version.
    """
    message = " ct (Card Tracker) v%(version)s \n"
    return message


def user_summary():
    """ """
    for key in parsed_db.keys():
        click.echo(f" \n {key} has a total of {display_count(key)} cards.")
    exit()


def get_user_name(name, remove=False):
    """ """
    if name is None:  # inforced title case, so that lower case name can be accepted
        if not remove:
            click.echo("\n Welcome to ct (Card Tracker).")
            name = create_key_name(" \n What is your first name? ", titlecase=True)
        else:
            name = create_key_name(" \n User name? ", titlecase=True)
    user_name = validate(name.title(), remove)
    if not remove:
        click.echo(f" \n Welcome back {user_name}.")
    return user_name


def validate(user_name, remove):
    """
    Validates user_name exists in db.
    Prompts for creation of new user in db.
    """

    while True:
        if user_name not in parsed_db:
            click.echo(f" \n {user_name} does not have an account!")
            if not remove:
                if click.confirm(f" \n Add new user {user_name}?", default=True):
                    parsed_db[user_name] = {}
                    dumpdict(parsed_db, db_path)
                    break
                else:
                    if not click.confirm(" \n Do you want to continue?", default=False):
                        exit()
                    continue
            exit()
        break
    return user_name  # break point


parsed_db = db_check()


@click.group()
@click.version_option(__version__, "-V", "--version", message=version_msg())
def ct() -> None:
    """ct (card tracker) a CLI tool to keep track of your collectable trading cards."""

    pass


@ct.command("checkin", help="Check in a new card for user.")
@click.option("-N", "--name", help="User name.")
def checkin(name):

    user_name = get_user_name(name)

    click.echo(" \n ### Card check in ###")
    while True:
        cardID = create_key_name(" \n Enter card ID: ")  # get card id
        if cardID not in parsed_db[user_name]:
            click.echo(f" \n Added {cardID} to the database!")
            parsed_db[user_name].update({cardID: {}})
            dumpdict(parsed_db, db_path)
            if not click.confirm(" \n Check another card?", default=True):
                click.echo(
                    f" \n {user_name} you have a total of {display_count(user_name)} cards.\n"
                )
                break
            continue
        else:
            click.echo(" \n That card aleady exists in the database!")
            if not click.confirm(" \n Check another card?", default=True):
                click.echo(
                    f" \n {user_name} you have a total of {display_count(user_name)} cards.\n"
                )
                break
            continue


@ct.command(help="Display a count of how many cards a user has.")
@click.option("-N", "--name", help="User name.")
def count(name):
    user_name = get_user_name(name)
    click.echo(" \n ### Card count ###")
    if user_name in parsed_db:
        click.echo(
            f" \n {user_name} you have a total of {display_count(user_name)} cards.\n"
        )
        exit()
    else:
        click.echo(f" \n {user_name} does not have an entry in the database!\n")
        exit()


@ct.command(help="Remove a card or remove a user.")
@click.option("--name", help="User name.")
@click.option("--card", is_flag=True, help="Remove a card.")
@click.option("--user", is_flag=True, help="Remove a user.")
def remove(name, card: bool, user: bool):
    """option --card: Remove a card from a user. option --user: Remove the user."""

    if card:
        click.echo(" \n ### Card removal ###")
        user_name = get_user_name(name, remove=True)
        while True:
            if display_count(user_name) > 0:
                cardID = create_key_name(" \n Enter card ID: ")  # get card id
                if cardID not in parsed_db[user_name]:
                    click.echo(" \n That card does not exist in the database!")
                    if not click.confirm(" \n Remove another card?", default=True):
                        click.echo(
                            f" \n {user_name} you have a total of {display_count(user_name)} cards.\n"
                        )
                        exit()
                    continue
                else:
                    click.echo(f" \n Removed {cardID} from the database!")
                    remove_key_from_dict(user_name, cardID)
                    dumpdict(parsed_db, db_path)
                    if display_count(user_name) > 0:
                        if not click.confirm(" \n Remove another card?", default=True):
                            click.echo(
                                f" \n {user_name} you have a total of {display_count(user_name)} cards.\n"
                            )
                            exit()
                        continue
            click.echo(f" \n {user_name} has no cards to remove.")
            exit()

    if user:
        click.echo(" \n ### User removal ###")
        while True:
            user_name = get_user_name(name, remove=True)
            if user_name not in parsed_db:
                if not click.confirm(" \n Remove another user?", default=True):
                    exit()
                name = None
                continue
            else:
                if not click.confirm(f" \n Remove user {user_name}?", default=True):
                    exit()
                if not click.confirm(
                    f" \n Are you sure you want to remove user {user_name}?",
                    default=False,
                ):
                    exit()
                click.echo(f" \n Removed {user_name} from the database!")
                parsed_db.pop(user_name)
                dumpdict(parsed_db, db_path)
                exit()

    if not card or user:
        click.echo("Missing arguments Try 'remove --help' for help.")


@ct.command(help="List users and card totals.")
def users():
    """
    Dummy command to appear in help screen.
    """
    return


def main():

    if len(sys.argv) > 1:
        if "users" in sys.argv[1]:
            click.echo(" \n ### User card count summary ###")
            while True:
                for key in parsed_db.keys():
                    click.echo(f" \n {key} has a total of {display_count(key)} cards.")
                click.echo("\n")
                exit()
    ct(prog_name="ct")


if __name__ == "__main__":
    main()
